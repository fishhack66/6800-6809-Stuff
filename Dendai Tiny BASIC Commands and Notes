
Tiny BASIC grammar table (6800 Dendai version)
Input rules: 	<command> <CR>
		<statement> <CR>, [] is an optional function


1. Commands
-----------
Keyword	Format	Function
NEW	NEW	Delete stored programs [RESETS END-PROG POINTER, 0 ALL VARIB]
RUN	RUN	Execute user program
LIST	LIST	Display the entire user program
	LIST n	Display the program line n
	LIST x,y  Display the program from line x to line y
LOAD	LOAD	Load a program from cassette tape [NOT OPERATIONAL]
AUTO	AUTO n	Line number generation; n initial value, incremented by 10
		Reset with Ctrl-C
EXIT	EXIT	Exit to monitor
PRINT $	PRINT $	Display remaining user RAM (abbr. PR$)
GOTO	GOTO n	Begin program execution at line n
RETURN	RETURN	Resume a program interrupted by a STOP statement (abbr. RET)
	Ctrl-C	Interrupt a running program
	Ctrl-O	Erase one character [PATCHED WITH BACKSPACE (ASCII 08)]
	Ctrl-X	Delete the current line
	line #	A line number alone will delete that line from user program


2. Statements
-------------
Keyword	Format/Example
LET	LET (optional)	LET A=3   B=C/10	
PRINT	PRINT (PR)	PRINT A   PR"TEXT ";A   PR '3 NUMBERS'A,B,C
INPUT	INPUT (IN)	INPUT A   IN A,B,C      IN "3 NUMBERS",A,B,C
GOTO	GOTO		GOTO 25   GOTO X
GOSUB	GOSUB		GOSUB 1440	GOSUB X
RETURN	RETURN		(placed at end of subroutine)
IF	IF (THEN opt.)	IF A=B GOTO 450   IF C<12 PR "LESS"   IF Z<=9 LET Y=3
FOR	FOR		FOR I=1 TO 12   FOR J=7 TO 1 STEP -1   FOR K=1 TO A-8
NEXT	NEXT (x opt.)	NEXT I    NEXT
STOP	STOP ("text")	(halts a program; restart with RET)  STOP "THE END"
REM	REM		REM A PROGRAM BY DHH, 02MAR24
END	END		(causes early termination of a program if not at end)


3. Functions
------------
Keyword	Format/Example
RND	RND(x)		random number   X=RND(12)+1   [NOT FUNCTIONAL]
						       *see NOTES, below
ABS	ABS(x)		absolute value   Y=ABS(V)   Z=ABS(A-B)
MOD	MOD(x,y)	remainder of division. X=MOD(50,7) [X=1], X=MOD(X,17)
USR	USR(x,y,z)	call user ML routine. X is address for JSR, Y is
			value to pass via X register, Z is value to pass via
			A and B accumulators, with A being the
			least-significant byte of a 16-bit word.
#	#(x)		absolute memory access.  X=#(4096) gives X the value
			in memory location #4096 ($1000).  #(66)=Y places
			the value of Y into location #66 ($0042).  This is
			equivalent to PEEK and POKE in most BASICs.
CHR	CHR(x)		print a character with ASCII value x   PR CHR(44)
TAB	TAB(x);		begin print at screen column x.  PR TAB(20);"HELLO"


4. Operators and Comparators
----------------------------
Type	Function
+	positivize	ensure that a number is positive
-	negate		ensure that a number is negative
+	addition
-	subtraction
*	multiplication
/	division
=	equal
<	less-than
>	greater-than
<=	less-than-or-equal-to
>=	greater-than-or-equal-to
<>	does not equal


5. Variables
------------
Total:	26, A-Z
Range:	-32768 to 32767, $0000 to $FFFF  [$8000 = # -32768, $FFFF = -1]


6. Array
--------
Total:	1, single dimension, named @       e.g.,  30 @(14)=12*(Y-X)
Range:	free user RAM/2


7. Error Messages
-----------------
100	Input Error
110	Out of Memory
120	Invalid Line Number
130	Print Error
140	Divide by Zero
150	Expression Too Complex
160	Arithmetic Error
170	Modulo Error
180	Unrecognizable Statement
190	Subroutine Error
200	Line Number Undefined
210	FOR Error
220	Undefined FOR Loop


================

From the original Japanese PDF:

In the Dendai version (of Tiny BASIC), the statement seperator is 
standardized to ':'. A semicolon is used for the Tab control character of a
print element, just as in standard BASIC, and a single colon is used because
we believe that a comma separator in an assignment list is not necessarily
essential.  In addition, the prompt for commands and text input is '>' in the
PA/University of Tokyo version, but '#' is used in the Dendai version. After
that, it also has a line number generation function. This is possible by using
the AUTO function. For example, if you set 'AUTO 100', the sentence input
prompt start at 100, and from then on, each time you complete a line, the
statement number is incremented by 10. Since it can be reset at any time by
inputting an interrupt signal (CTRL-C), it is one of the most useful BASIC
statement input functions.

The BASIC interpreter has two startup addresses: $100 is the cold start
address, and $103 is the warm start address.

In addition to transitioning to monitor control with EXIT, one of the features
provided is STOP. When a logic error occurs, insert a STOP statement with a
line number at the required location to forcibly interrupt the process.  Use
the PRINT statement or, if necessary, EXIT to check the error content, correct
it, or RETURN. In addition, a fairly powerful program trace function is
provided in conjunction with the GOTO x command.  Note that the input
character set is the ASCII upper and lower case character set. Both inputs are
treated equally.


=======
 NOTES
=======

The NEW command should be issued immediately after starting Dendai Tiny BASIC.
Cold start ($0100) does not clear variables or program RAM as the interpreter
was originally presented.  I patched the interpreter's NEW command to zero out
the variables A-Z and reset the 'end of program' pointer to one byte after the
start of program memory.

Numbers are integers and range from -32768 to 32767 ($8000, wrap to $7FFF).

Line numbers may be from 1 up to 32767, and lines may be up to 70
characters in length (the DTB Loader allows lines from 1-9999).

Variables may be input (IN) or assigned (LET) in either decimal or hexidecimal
(prefixed with $), but output (PRINT) is only in decimal.

The order of precedence is:	1. sign			+ or -
				2. multiplication
				   and division		* or /
				3. addition and
				   subtraction		+ or -
Parentheses may be used to to change the order of operation.

Program entry can be made in lower case, but will be converted to upper case.

The character '%' (percent) will not print; instead, it's replaced with '@'.
It *can* be printed out with CHR(37).  See label INFFF at the end of the
source code.

Because Dendai converts all input to uppercase before acting upon it, if
you input something like    10 PR"This is lowercase."    the output will be
THIS IS LOWERCASE.  One way around this is to type in programs "off-line"
and then use the DTB Loader program.  This will preserve lowercase.  To print
lower case letters on the fly, use PR CHR(x) and/or the @ array.

If you change your terminal emulator software to use the IBM-850 set (any
of the IBM-85x sets should work), you will also have the box- and line-drawing
characters, and more symbols.  This one-liner will print out the full
character set:
	10 FOR I=0TO15:FORJ=0TO15:PR CHR(I*16+J);"  ";:NEXT J:PR:NEXT I
NOTE: You will lose the the backspace key; it will not function.  Instead,
you must use a CTRL-H/space/CTRL-H sequence (don't type the slashes :^)
For general functionality, I recommend the ISO-8859 set.

The @ array grows dynamically from the end of the user program up to the top
of user RAM, two (2) bytes per elemant.  The % character appears to have
something to do with the array.  In the original Japanese text, % use roughly
translates to: "to be used only when entering keys." [???]

Statements may be chained together on a single line with a colon.  E.g.:
	100 FOR I=32 TO 255 STEP 2:PR I:NEXT:PR"ALL DONE."
Like most BASICs, Dendai Tiny BASIC will fall out of a multi-statement line
if a comparison returns 'false'.  E.g.:
		240 FOR I=1 TO 12:IF I>6 PR I:NEXT
will print nothing, having failed the test on the first loop.  Worse, it
leaves a return address on the FOR/NEXT stack.  Put the NEXT on another line;
if you need to break out of a loop prematurely, use an IF/THEN structure.

The LOAD command is meant to reload a program tape dumped to a paper tape
or to Kansas City standard cassette recording.  It should be possible to load
in an S Record file, but this command did not work on my system.  See address
$0196 in the source code listing.

To load a text-listed program via serial terminal emulator upload, set a
character delay of 50 ms and a line delay of 350 ms to facilitate internal
line processing, then send the file.  The plain text source file should not
have any blank lines between program lines, and should be CR-only line
terminated (Linux is typically LF-only, and Windows CR-LF).  Long text files
(3K+) may require delays of up to 100ms for characters and 1,000 ms for
lines -- possibly even 3,000 ms!  But there are better ways...

A faster method of loading programs is through the DTB Loader program, which
resides at $A100 (relocatable) and can load text files smaller than 14.5KB.
The serial terminal delays should be set to 10 ms character, 100 ms line.
The BASIC source file must have CR-only line endings, there should be no
blank lines between lines in the listing, the last line of code must be
the END statement all by itself, and the very last line of the file has to
be the } character and a carriage return.  The loader handles the
end-of-program address at $00B8-9 for you, so simply warm-start DTB with a
jump to $0103.  

An S Record file of an already-saved program can be loaded with no character
or line delays via the terminal emulator.  Start Dendai Tiny BASIC, issue a
NEW command, then EXIT.  After loading an S Record, you will also need to
store the end-of-program address in $00B8-9.  Once that's done, re-enter DTB
via a warm start at $0103.  

Programs can be saved via a modern serial terminal emulator two ways:
1) start a text capture, LIST the program, then close/save the text file; the
program will start each line with an unprintable character, which can be
cleaned up in any modern text editor.  Use CR-ONLY line endings.
2) once a text file is loaded into user RAM, it is *highly* recommended to use
the EXIT command to go back to the monitor and punch an S Record file of the
program.  The start address is $0980 (unless altered by the user at location
$00B6-7) and the end-of-program address is located at $00B8-9.  

The pseudo-random number generator in the source code (at $05EA) does not
behave as expected, and try as I might, I can't figure out what's going wrong.
It's got something to do with processing the expression of the function.  So,
I edited a copy of it, put that code at $0004, and when the routine is called
with the USR function, you get a random number back in the range -32768 to
32767.  E.g.,		10 X=USR(4):X=MOD(X,6)+1
X will contain a random number from 1 to 6.  Not as elegant as RND, but it
works.

Regarding user-written machine language routines, there is available RAM in
Zero Page from $0000 to $0003, and at $0019.  The area from $095B to $097F
(37 bytes) is available for a small subroutine.  The top of user RAM can be
lowered at location $00BA, and the bottom of user RAM raised at $00B6.

=========================================

About Dendai Tiny BASIC and this document:
   This document is derived from a description of Dendai Tiny BASIC in the
Japanese magazine 'bit', volume 10, no. 8, pages 44-45.  The text was run
through Google Translate and then edited for English usage and clarity.  There
appears to be more to the original article than was contained in the PDF file
of the command/statement/function descriptions.
   Dendai Tiny BASIC was made popular by the "BLUE BACKS" book "Use My
Computer: Peripheral Devices and Actual Usage," by Toshiaki Yasuda, in the
late 1970s.  The interpreter is detailed in the appendix of the book.  This
particular Tiny BASIC appears to be inspired by "PA/Tokyo University" 8080
Tiny BASIC (likely based on Li-Chen Wang's Palo Alto Tiny BASIC), and was
developed by Yasuda when he was at Tokyo Denki University.

Best regards, Dave Hassler